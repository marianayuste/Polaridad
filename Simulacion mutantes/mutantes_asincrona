def get_truth_table_asyn_mut(nodos,
                             edo_inicial,
                             pasos,
                             reglas,
                             gen_mut, # lista p.e.: ['YAB','miR']
                             edo_gen_mut, # lista p.e.: ['0','0']
                             attrs_sincrona #lista attrs punto fijo de la mutante en síncrona p.e. ['100','000']
                            ):
    
    '''Generar de forma Asíncrona la tabla de verdad de un edo inicial 
    con un gen siempre en un edo específico'''


    #lista con los edos en cada t (resultado final a entregar)
    truth_tables = [edo_inicial]
        #NOTA: no cambio el valor de los nodos mutados porque 
        #en get_attrs_asyn_mut se usan unicamente edos iniciales que cumplan
        #con el valor de la mutante
        
    for t in range(1,pasos):
        #edo de cada nodo en el tiempo anterior
        edos = {}
        for x in range(len(nodos)):
            edos[nodos[x]] = truth_tables[t-1][x]
    
        #escoger el nodo que se modificara
        #para reducir pasos elegir de los nodos que no son mutados
        nodos_sin_gen_mut = [] #ya son los lugares en números, no son nombres
        for a in range(len(nodos)):
            if nodos[a] not in gen_mut:
                nodos_sin_gen_mut.append(a)
        x = random.choice(nodos_sin_gen_mut)
        
        #generar nuevo edo del nodo seleccionado
        r = reglas.split(';')
        #cambiar ~,& y | por not,and y or
        regla = r[x].replace('~', 'not ').replace('&',' and ').replace('|',' or ')
        #cambiar nombres de nodos por sus edos en t
        for y in nodos:
            regla = regla.replace(y, edos[y])

        #guardar edo nuevo de cada gen dependiendo el caso
        nuevo = ''
        for z in range(len(nodos)):
            #si es un gen mutado dejar el edo_gen_mut:
            if nodos[z] in gen_mut:
                nuevo = nuevo + edo_gen_mut[gen_mut.index(nodos[z])]
            #si es el nodo x poner la regla
            elif z == x:
                nuevo = nuevo + str(eval(regla)).replace('True','1').replace('False','0')
            #si no es el nodo x ni está mutado poner el valor en tiempo t
            else:
                nuevo = nuevo + edos[nodos[z]]

        #guardar este último edo
        truth_tables.append(nuevo)
        
        #Parar si se llega a un edo correspondiente a un attr de punto fijo en Síncrona
        if nuevo == truth_tables[t-1]: #si ya se repitio una vez (esto facilita la función get_attrs)
            if nuevo in attrs_sincrona:
                #terminar la funcion
                return truth_tables

        
    return truth_tables
        
ejemplo = get_truth_table_asyn_mut(['YAB','ARF3','miR'], '111', 100, '~miR;YAB&miR;ARF3', ['YAB'], ['0'],['000'])
ejemplo
