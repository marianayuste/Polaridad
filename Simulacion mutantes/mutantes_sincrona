def get_truth_table_mut(nodos,         #lista de nombres de nodos p.e.: ['YAB','ARF3','miR','KAN','REV','AS12']
                        edo_inicial,   #string con edos iniciales de todos los nodos p.e.: '111111'
                        pasos,         #integer con max de pasos en el tiempo que se correra la tabla p.e.: 50
                        reglas,        #string con reglas logicas de cada nodo separadas con ';' p.e.: '~AS12;~AS12;(~REV&AS12);YAB;~miR;(REV&~KAN)'
                        gen_mut,       #lista de nodos mutados p.e.: ['YAB','miR']
                        edo_gen_mut):  #lista de edos nodos mutados p.e.: ['0','0']
                        
    '''Generar de forma Síncrona la tabla de verdad de un edo inicial 
     con uno o mas nodos siempre en un edo específico'''

    #diccionario con los edos en cada tiempo(t) (resultado final a entregar)
    truth_tables = [edo_inicial]
        #NOTA: no cambio el valor de los nodos mutados porque 
        #en get_attrs_mut se usan unicamente edos iniciales que cumplan
        #con el valor de la mutante

    for t in range(1,pasos): #hacer análisis hasta los pasos maximos especificados

        #guardar diccionario con edo de cada nodo en tiempo anterior (t)
        edos = {}
        for x in range(len(nodos)):
            edos[nodos[x]] = truth_tables[t-1][x]


        #generar el nuevo edo en t+1 de cada nodo
        r = reglas.split(';')
        nuevo = ''
        for x in range(len(nodos)):
            #si es un gen mutado poner el edo siempre igual al establecido
            if nodos[x] in gen_mut:
                regla = edo_gen_mut[gen_mut.index(nodos[x])]
            #si no es un gen mutado, generar su valor nuevo
            else:
                #cambiar ~,& y | por not,and y or
                regla = r[x].replace('~', 'not ').replace('&',' and ').replace('|',' or ')
                #cambiar nombres de nodos por sus edos en t 
                for y in nodos:
                    regla = regla.replace(y, edos[y])
            #guardar el valor del nodo en el string con los valores en t+1 de todos los nodos
            nuevo = nuevo + str(eval(regla)).replace('True','1').replace('False','0')

        #guardar el edo nuevo en lista de edos
        truth_tables.append(nuevo)

        #terminar si el edo nuevo ya estaba en la lista
        if nuevo in truth_tables[:-1]:
            return truth_tables
        
        #avisar si se llego al max numero de pasos sin encontrar un attr
        if t == pasos-1:
            return 'se requieren mas pasos para edo inicial %s' %edo_inicial
